# File: prisma/schema.prisma
# Path: fanfix-api/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  hashed_password  String
  is_active        Boolean          @default(true)
  is_superuser     Boolean          @default(false)
  is_verified      Boolean          @default(false)
  created_at       DateTime         @default(now())
  last_login       DateTime?
  preferences      UserPreferences?
}

model UserPreferences {
  userId             String    @id
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  selectedCreatorId  String?
  openaiApiKey       String?
  modelName          String    @default("gpt-3.5-turbo")
  numSuggestions     Int       @default(3)
}

model Creator {
  id            String           @id @default(uuid())
  name          String
  description   String?
  avatarUrl     String?
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  style         CreatorStyle?
  examples      StyleExample[]
  vectorStore   VectorStore[]
}

model CreatorStyle {
  creatorId              String    @id
  creator                Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  approvedEmojis         String[]
  caseStyle              String?
  textReplacements       Json?
  sentenceSeparators     String[]
  punctuationRules       Json?
  abbreviations          Json?
  messageLengthPreference String?
  styleInstructions      String?
  toneRange              String?
}

model StyleExample {
  id                String    @id @default(uuid())
  creatorId         String
  creator           Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fanMessage        String
  creatorResponses  String[]
  createdAt         DateTime  @default(now())
}

/// @pgvector
model VectorStore {
  id                String    @id @default(uuid())
  creatorId         String
  creator           Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fanMessage        String
  creatorResponses  String[]
  embedding         Unsupported("vector(1536)")?
  similarityScore   Float?
  timestamp         DateTime  @default(now())

  @@index([creatorId])
  @@index([embedding], type: Ivfflat)
}