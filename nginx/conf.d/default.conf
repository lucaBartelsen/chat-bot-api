# File: nginx/conf.d/default.conf (updated)
# Path: fanfix-api/nginx/conf.d/default.conf

server {
    listen 80;
    server_name chatsassistant.com www.chatsassistant.com;
    
    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name chatsassistant.com www.chatsassistant.com;

    # SSL configuration - Cloudflare Origin certificates
    ssl_certificate /etc/nginx/ssl/origin-certificate.pem;
    ssl_certificate_key /etc/nginx/ssl/private-key.pem;
    
    # Recommended SSL settings for Cloudflare
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Cloudflare IPs for proxy protocol
    # Update these if Cloudflare's IP ranges change
    # See: https://www.cloudflare.com/ips/

    # Set real IP from Cloudflare
    real_ip_header CF-Connecting-IP;

    # API endpoints
    location /api/ {
        proxy_pass http://api:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;
        client_max_body_size 10M;
    }

    # Diagnostics endpoints
    location /diagnostics/ {
        proxy_pass http://api:8000/diagnostics/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://api:8000/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static documentation fallback for when API docs are down
    location /static/ {
        alias /var/www/html/static/;
        try_files $uri $uri/ =404;
    }

    # API documentation routes with fallbacks
    location /docs {
        # Try to proxy to API first
        proxy_pass http://api:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Set a short timeout for /docs to quickly fall back if API is having issues
        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;
        
        # If API fails, serve static documentation
        proxy_intercept_errors on;
        error_page 404 500 502 503 504 = @docs_fallback;
    }
    
    # Fallback location for /docs
    location @docs_fallback {
        return 307 /static/swagger/;
    }

    # ReDoc documentation
    location /redoc {
        proxy_pass http://api:8000/redoc;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Set a short timeout
        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;
        
        # If API fails, serve static documentation
        proxy_intercept_errors on;
        error_page 404 500 502 503 504 = @redoc_fallback;
    }
    
    # Fallback location for /redoc
    location @redoc_fallback {
        return 307 /static/api-docs.html;
    }

    # OpenAPI JSON - needed for documentation
    location /openapi.json {
        proxy_pass http://api:8000/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # If API fails, try the diagnostics endpoint
        proxy_intercept_errors on;
        error_page 404 500 502 503 504 = @openapi_fallback;
    }
    
    # Fallback for OpenAPI JSON
    location @openapi_fallback {
        # Redirect to the diagnostics endpoint which provides a minimal valid schema
        return 307 /diagnostics/fix-openapi;
    }

    # Special reload OpenAPI route for quick fixes
    location /reload-openapi {
        proxy_pass http://api:8000/reload-openapi;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main route with fallback to static doc
    location / {
        # First try API
        proxy_pass http://api:8000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle API errors by falling back to static content
        proxy_intercept_errors on;
        error_page 404 500 502 503 504 = @root_fallback;
    }
    
    # Fallback for root
    location @root_fallback {
        # Try static files
        root /var/www/html;
        try_files $uri $uri/ /static/api-docs.html;
    }

    # Error pages
    error_page 404 /404.html;
    location = /404.html {
        root /var/www/html;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /var/www/html;
    }
}